/*
 * This code is written as a part of a Master Thesis
 * the spring of 2016.
 *
 * Thor Eivind Andersen and Mats RÃ¸dseth (Master 2016 @ NTNU)
 */
package no.ntnu.tem.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import no.ntnu.tem.application.Application;

/**
 * Presents a JFrame that can scan and connect to robots, it is possible to connect to several robots at the same time
 * @author Thor Eivind and Mats (Master 2016 @ NTNU)
 */
public class ConnectRobotsGUI extends javax.swing.JFrame {

    private final MainGUI parent;
    private final Application app;
    private final ObservableList<String[]> ol;
    private final ListChangeListener listener;

    /**
     * Creates new form ConnectRobotsGUI
     *
     * @param parent reference to mainGUI
     */
    public ConnectRobotsGUI(MainGUI parent) {
        initComponents();
        setLocationRelativeTo(parent);
        this.parent = parent;
        this.app = parent.getApplication();
        parent.setEnabled(false);
        WindowAdapter wa = new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                parent.setEnabled(true);
            }
        };

        this.addWindowListener(wa);
        scan();

        listener = new ListChangeListener() {
            @Override
            public void onChanged(ListChangeListener.Change c) {
                updatemyList();
            }
        };

        ol = app.getAvailableRobotList();
        ol.addListener(listener);
    }

    /**
     * Update called when availableRobotList gets changed.
     */
    private void updatemyList() {
        updateAvailableRobots(ol);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panRobots = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        pbScan = new javax.swing.JProgressBar();
        btnScan = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connect Robots");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Available robots", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rockwell", 1, 18))); // NOI18N
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panRobots.setLayout(new javax.swing.BoxLayout(panRobots, javax.swing.BoxLayout.Y_AXIS));

        jCheckBox1.setText("Robot 1");
        jCheckBox1.setFocusable(false);
        panRobots.add(jCheckBox1);

        jCheckBox2.setText("Robot 2");
        jCheckBox2.setFocusable(false);
        panRobots.add(jCheckBox2);

        jCheckBox3.setText("Robot 3");
        jCheckBox3.setFocusable(false);
        panRobots.add(jCheckBox3);

        jScrollPane1.setViewportView(panRobots);

        pbScan.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        pbScan.setString("Scanning...");
        pbScan.setStringPainted(true);

        btnScan.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnScan.setText("Scan");
        btnScan.setFocusable(false);
        btnScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScanActionPerformed(evt);
            }
        });

        btnConnect.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.setFocusable(false);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setFocusable(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pbScan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnScan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnCancel))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(pbScan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnScan)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        close();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        close();
    }//GEN-LAST:event_formWindowClosed

    private void btnScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanActionPerformed
        scan();
    }//GEN-LAST:event_btnScanActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        connect();
    }//GEN-LAST:event_btnConnectActionPerformed

    /**
     * Method used to initiate a scan for robots. The method has a background
     * task that waits a second between scanning, stopping the scan and lists
     * all found robots. It is important to wait a second between these tasks as
     * the program needs the time to search. (nrf51)
     */
    private void scan() {
        btnScan.setEnabled(false);
        btnCancel.setEnabled(false);
        btnConnect.setEnabled(false);
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        clearRobotList();
        final SwingWorker worker;
        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                pbScan.setString("Scanning.");
                pbScan.getModel().setValue(0);
                app.startScan();
                Thread.sleep(500);
                pbScan.getModel().setValue(20);
                Thread.sleep(500);
                pbScan.setString("Scanning..");
                pbScan.getModel().setValue(40);
                app.stopScan();
                Thread.sleep(500);
                pbScan.getModel().setValue(60);
                Thread.sleep(500);
                pbScan.setString("Scanning...");
                panRobots.add(new JLabel("No robots found"));
                panRobots.add(new JLabel("Are you sure you have the right"));
                panRobots.add(new JLabel("com port?"));
                panRobots.revalidate();
                pbScan.getModel().setValue(80);
                app.listAvailableRobots();
                Thread.sleep(100);
                pbScan.setString("-");
                pbScan.getModel().setValue(100);
                return null;
            }

            @Override
            public void done() {
                try {
                    get();
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(ConnectRobotsGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                btnScan.setEnabled(true);
                btnCancel.setEnabled(true);
                btnConnect.setEnabled(true);
                setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }

        };
        worker.execute();
    }

    /**
     * Connects to all selected robots
     */
    private void connect() {
        List<Integer> selectedRobots = getSelectedRobots();
        if (selectedRobots.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No robot selected!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        final JDialog dlg = new JDialog(this, "Progress Dialog", true);
        JProgressBar dpb = new JProgressBar(0, selectedRobots.size() * 2);
        dlg.add(BorderLayout.CENTER, dpb);
        dlg.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        dlg.setSize(300, 75);
        dlg.setLocationRelativeTo(null);

        final SwingWorker worker;
        worker = new SwingWorker<Void, Void>() {
            //TODO: konvertere til standard for lÃ¸kke. er litt problemer med denne.
            @Override
            protected Void doInBackground() throws Exception {

                for (int i = 0; i < selectedRobots.size(); i++) {
                    dpb.setValue((i + 1) * 2);
                    app.connectToRobot(selectedRobots.get(i));
                    if (dpb.getValue() == selectedRobots.size() * 2) {
                        dlg.setVisible(false);
                    }
                    try {
                        Thread.sleep(500);
                        dpb.setValue((i + 1) * 2 + 1);
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                return null;
            }
        };
        worker.execute();
        dlg.setVisible(true);
        parent.setEnabled(true);
        dispose();

    }

    /**
     * Method that returns the id of the selected robots.
     *
     * @return
     */
    private List<Integer> getSelectedRobots() {
        List<Integer> selected = new ArrayList<>();
        Component[] checkboxes = panRobots.getComponents();
        for (int i = 0; i < checkboxes.length; i++) {
            if (((JCheckBox) (checkboxes[i])).isSelected()) {
                selected.add(i);
            }
        }
        return selected;
    }

    /**
     * Clears the list of robots (panRobots)
     */
    private void clearRobotList() {
        panRobots.removeAll();
        panRobots.revalidate();
        panRobots.repaint();
    }

    /**
     * Method used to update the list of robots (panRobots)
     *
     * @param list the list containing avaliableRotbots
     */
    private void updateAvailableRobots(ObservableList<String[]> list) {
        clearRobotList();
        for (String[] s : list) {
            JCheckBox checkbox = new JCheckBox(s[1]);
            checkbox.setFocusable(false);
            panRobots.add(checkbox);
        }
        panRobots.revalidate();
    }

    /**
     * Method used to close this window
     */
    private void close() {
        ol.removeListener(listener);
        parent.setEnabled(true);
        this.setVisible(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnScan;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panRobots;
    private javax.swing.JProgressBar pbScan;
    // End of variables declaration//GEN-END:variables
}
